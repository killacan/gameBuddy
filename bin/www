#!/usr/bin/env node

/**
 * Module dependencies.
 */

const mongoose = require('mongoose');
const { mongoURI: db} = require('../config/keys.js');
const crypto = require('crypto');

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

const WEBSOCKET_MAGIC_STRING_KEY = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
const SEVEN_BITS_INTEGER_MARKER = 125;
const SIXTEEN_BITS_INTEGER_MARKER = 126;
const SIXTYFOUR_BITS_INTEGER_MARKER = 127;

const MAXIMUM_SIXTEEN_BITS_INTEGER = 2 ** 16
const MASK_KEY_BYTES_LENGTH = 4
const OPTCODE_TEXT = 0x01 // first bit in binary

const FIRST_BIT = 128
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// const {Server} = require("socket.io");
// const io = new Server(server); 

/**
 * Listen on provided port, on all network interfaces.
 */
mongoose
  .connect(db, {useNewUrlParser: true})
  .then(() => {
    debug("Connect to MongoDB successfully");
    server.listen(port);
  });
  
server.on('error', onError);
server.on('listening', onListening);
  
server.on('upgrade', onSocketUpgrade)
// server.on('connection', (ws) => {
  
// })

const users = {}

function onSocketUpgrade (req, socket, head) {
  if (users[req.url]) {
    users[req.url].push(socket) 
  } else {
    users[req.url] = [socket]
  }
  const {'sec-websocket-key': webClientSocketKey} = req.headers
  console.log(`webClientSocketKey: ${webClientSocketKey}`)
  const headers = prepareHandShakeHeaders(webClientSocketKey)
  socket.write(headers)
  socket.on('readable', () => onSocketReadable(socket))
  // socket.on('close',() => console.log('client disconnected'))
}

function sendMessage(msg, socket, roomId) {
  const dataFrameBuffer = prepareMessage(msg)
  linkId = "/?roomId=" + roomId
  // console.log(users[linkId], 'msg')
  users[linkId].forEach (userSocket => {
    // console.log("inside users Each")
    userSocket.write(dataFrameBuffer)
  })

}

function prepareMessage(message) {
  const msg = Buffer.from(message)
  const messageSize = msg.length

  let dataFrameBuffer; 

  const firstByte = 0x80 | OPTCODE_TEXT // single frame + text

  if(messageSize <= SEVEN_BITS_INTEGER_MARKER) {
    const bytes = [firstByte]
    dataFrameBuffer = Buffer.from(bytes.concat(messageSize))
  } else if(messageSize <= MAXIMUM_SIXTEEN_BITS_INTEGER) { 
    const offsetFourBites = 4
    const target = Buffer.allocUnsafe(offsetFourBites)
    target[0] = firstByte
    target[1] = SIXTEEN_BITS_INTEGER_MARKER | 0x0 // just to know the mask

    target.writeUInt16BE(messageSize, 2) // content length is 2 bytes long. 
    dataFrameBuffer = target

    //alloc 4 bytes
    // [0] - 129 - 10000001 = 0x81 fin + opcode
    // [1] - 126 
  }
  
  else {
    throw new Error('message too long buddy :( ')
  }

  const totalLength = dataFrameBuffer.byteLength + messageSize
  const dataFrameResponse = concat([dataFrameBuffer, msg], totalLength)
  return dataFrameResponse
}

function concat(bufferList, totalLength) {
  const target = Buffer.alloc(totalLength)
  let offset = 0
  for(const buffer of bufferList) {
    target.set(buffer, offset)
    offset += buffer.length
  }

  return target
}

function onSocketReadable(socket) {
  // console.log(socket, 'socket')
  // consume optcode (first byte)
  socket.read(1)

  const [markerAndPayloadLength] = socket.read(1)
  // because the first bit is always 1 for client to server messages. 
  // you can subtract one bit (128) from this byte to get rid of the MASK bit
  const lengthIndicatorInBits = markerAndPayloadLength - FIRST_BIT

  let messageLength = 0
  if(lengthIndicatorInBits <= SEVEN_BITS_INTEGER_MARKER) {
    messageLength = lengthIndicatorInBits
  } else if(lengthIndicatorInBits === SIXTEEN_BITS_INTEGER_MARKER) { 
    // unsigned, big-endian 16-bit integer [0 - 65k] - 
    messageLength = socket.read(2).readUInt16BE(0)
  }
  
  else {
    throw new Error("your message is too long! we don't handle 64 bit messages")
  }


  const mastKey = socket.read(MASK_KEY_BYTES_LENGTH)
  const encoded = socket.read(messageLength)
  const decoded = unmask(encoded, mastKey)
  const received = (decoded.toString('utf8'))

  const data = JSON.parse(received)
  console.log('message received', data)

  const msg = JSON.stringify(
    data
  )
  sendMessage(msg, socket, data.roomId)

}

function unmask(encodedBuffer, maskKey) {
  // console.log('encodedBuffer', encodedBuffer, 'maskKey', maskKey)
  const finalBuffer = Buffer.from(encodedBuffer);

  const fillWithEightZeroes = (t) => t.padStart(8, '0')
  const toBinary = (t) => fillWithEightZeroes(t.toString(2))
  const fromBinaryToDecimal = (t) => parseInt(toBinary(t), 2)
  const getCharFromBinary = (t) => String.fromCharCode(fromBinaryToDecimal(t))

  for (let i = 0; i < encodedBuffer.length; i++) {
    finalBuffer[i] = encodedBuffer[i] ^ maskKey[i % 4];
    const logger = {
      unmaskingCalc: `${toBinary(encodedBuffer[i])} ^ ${toBinary(maskKey[i % MASK_KEY_BYTES_LENGTH])} = ${toBinary(finalBuffer[i])}`,
      decoded: getCharFromBinary(finalBuffer[i]),
    }
    // console.log(logger)
  }

  return finalBuffer;
}

// function unmask(encodedBuffer, maskKey) {

//   // Create the byte Array of decoded payload
//   const DECODED = Uint8Array.from(encodedBuffer, (elt, i) => elt ^ maskKey[i % 4]); // Perform an XOR on the mask

//   return DECODED

// }


function prepareHandShakeHeaders(id) {
  const acceptKey = createSocketAccept(id)
  const headers = [
    'HTTP/1.1 101 Switching Protocols',
    'Upgrade: websocket',
    'Connection: Upgrade',
    `Sec-WebSocket-Accept: ${acceptKey}`,
    ''
  ].map(line => line.concat('\r\n')).join('')

  return headers
}

function createSocketAccept(id) {
  const shaum = crypto.createHash('sha1')
  shaum.update(id + WEBSOCKET_MAGIC_STRING_KEY)
  return shaum.digest('base64')
}

;
[
    "uncaughtException",
    "unhandledRejection"
].forEach(event =>  
    process.on(event, (err) => {
        console.error(`something bad happened! event: ${event}, msg: ${err.stack || err}`);
}));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
